<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UndoService</name>
    </assembly>
    <members>
        <member name="T:StateManagement.DataStructures.IntStackWithDelete">
            <summary>
            Stack<Int> with DeleteLast(int) method added.</Int>
            </summary>
        </member>
        <member name="M:StateManagement.DataStructures.IntStackWithDelete.DeleteLast(System.Int32)">
            <summary>
            Deletes the last instance of a value from the stack. Does nothing if the value is not in the stack.
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:StateManagement.DataStructures.IStack`1">
            <summary>
            Interface to allow using Stacks or Dropout stacks interchangeably. (Dropout stacks are used where a capacity limit needs to be applied.)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:StateManagement.DataStructures.IStack`1.HasItemsChanged">
            <summary>
            Occurs when the stack changes from having items to not having items and vice-versa
            </summary>
        </member>
        <member name="T:StateManagement.DataStructures.StandardStack`1">
            <summary>
            Wrapper for standard stack which raises HasItemsChanged events.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:StateManagement.GetState`1">
            <summary>
            Gets the state of an object, to allow reversion later via undo/redo
            </summary>
            <typeparam name="T">The type used to record the object state</typeparam>
            <param name="state"></param>
        </member>
        <member name="T:StateManagement.SetState`1">
            <summary>
            Sets the state of an object. Can be invoked via Undo/Redo
            </summary>
            <typeparam name="T">The type used to record the object state</typeparam>
            <param name="state"></param>
        </member>
        <member name="T:StateManagement.StateRecordedEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:StateManagement.StateSetEventHandler">
            <summary>
            Handler for StateSet event, which is raised when Undo() or Redo() is executed.
            </summary>
            <param name="sender"></param>
            <param name="e">StateSetEventArgs. This indicates whether it was a Redo or Undo action that raised the event, and the value of the tag if one given to the recorded state</param>
        </member>
        <member name="T:StateManagement.IStateTracker">
            <summary>
            Records state changes.
            </summary>
        </member>
        <member name="E:StateManagement.IStateTracker.StateSet">
            <summary>
            Raised when Undo or Redo is executed.
            </summary>
        </member>
        <member name="E:StateManagement.IStateTracker.StateRecorded">
            <summary>
            Raised when RecordState() is executed.
            </summary>
        </member>
        <member name="E:StateManagement.IStateTracker.ClearStackInvoked">
            <summary>
            Raised when a public method to clear one or both of the undo and redo stacks is invoked.
            </summary>
        </member>
        <member name="M:StateManagement.IStateTracker.RecordState(System.Object)">
            <summary>
            Records the current state of the tracked objects and puts it on the undo stack.
            </summary>
            <param name="tag">When the tracked object is reverted to this state, a StateSet event will be thrown with this as a property in its arguments. </param>
        </member>
        <member name="T:StateManagement.IUndoRedo">
            <summary>
            Performs Undo/redo actions. Used in conjunction with an IStateTracker.
            </summary>
        </member>
        <member name="E:StateManagement.IUndoRedo.CanUndoChanged">
            <summary>
            Raised when CanUndo changes.
            </summary>
        </member>
        <member name="E:StateManagement.IUndoRedo.CanRedoChanged">
            <summary>
            Raised when CanRedo changes.
            </summary>
        </member>
        <member name="P:StateManagement.IUndoRedo.CanUndo">
            <summary>
            
            </summary>
        </member>
        <member name="P:StateManagement.IUndoRedo.CanRedo">
            <summary>
            
            </summary>
        </member>
        <member name="P:StateManagement.IUndoRedo.IsStateChanged">
            <summary>
            Indicates whether the state was changed from its original state or the last time ClearIsStateChangedFlag was invoked. The intended use is to flag if there are unsaved changes to the state.
            </summary>
        </member>
        <member name="M:StateManagement.IUndoRedo.ClearIsStateChangedFlag">
            <summary>
            Resets the IsStateChanged flag to false. This is intended to be invoked after saving state, to show that there are no longer unsaved changes. 
            </summary>
        </member>
        <member name="M:StateManagement.IUndoRedo.Reset">
            <summary>
            Clears the Undo and Redo stacks and sets the IsStateChanged flag to false.
            </summary>
        </member>
        <member name="M:StateManagement.IUndoRedo.ClearStacks">
            <summary>
            Clears the Undo and Redo stacks.
            </summary>
        </member>
        <member name="M:StateManagement.IUndoRedo.ClearUndoStack">
            <summary>
            Clears the Undo stack (but not the redo stack).
            </summary>
        </member>
        <member name="M:StateManagement.IUndoRedo.ClearRedoStack">
            <summary>
            Clears the redo stack (but not the undo stack). This is done automatically when RecordState() is invoked.
            </summary>
        </member>
        <member name="M:StateManagement.IUndoRedo.Undo">
            <summary>
            
            </summary>
        </member>
        <member name="M:StateManagement.IUndoRedo.Redo">
            <summary>
            
            </summary>
        </member>
        <member name="T:StateManagement.IUndoService">
            <summary>
            Performs Undo/Redo operations and state recording
            </summary>
        </member>
        <member name="T:StateManagement.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:StateManagement.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:StateManagement.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:StateManagement.Resources.AddingPopulatedSubserviceExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot add an UndoService which has existing states recorded. Add it before its RecordState() method has been invoked or call its ClearStacks() method before adding it..
            </summary>
        </member>
        <member name="P:StateManagement.Resources.AddUndoServiceWithChanges">
            <summary>
              Looks up a localized string similar to You cannot add an UndoService to an Aggregate if the service&apos;s ChangeCount is not zero. If.
            </summary>
        </member>
        <member name="P:StateManagement.Resources.ClearStackDirectlyOnSubservice">
            <summary>
              Looks up a localized string similar to A clear stack method was invoked directly on an UndoService that is part of an UndoServiceAggregate. Invoke the clear stack methods on the UndoServiceAggregate instead..
            </summary>
        </member>
        <member name="P:StateManagement.Resources.RedoWithoutCanRedo">
            <summary>
              Looks up a localized string similar to Nothing to redo. Check that CanRedo is true before invoking Redo()..
            </summary>
        </member>
        <member name="P:StateManagement.Resources.SubServiceRedoFailure">
            <summary>
              Looks up a localized string similar to Redo failed in subservice when aggregate expected it to succeed..
            </summary>
        </member>
        <member name="P:StateManagement.Resources.SubServiceUndoFailure">
            <summary>
              Looks up a localized string similar to Undo failed in subservice when aggregate expected it to succeed. .
            </summary>
        </member>
        <member name="P:StateManagement.Resources.UndoWithoutCanUndo">
            <summary>
              Looks up a localized string similar to Nothing to undo. Check that CanUndo is true before invoking Undo()..
            </summary>
        </member>
        <member name="T:StateManagement.StateSetAction">
            <summary>
            The type of Action (Undo or Redo) that caused the state to be set
            </summary>
        </member>
        <member name="F:StateManagement.StateSetAction.Undo">
            <summary>
            </summary>
        </member>
        <member name="F:StateManagement.StateSetAction.Redo">
            <summary>
            </summary>
        </member>
        <member name="T:StateManagement.StateSetEventArgs">
            <summary>
            Event arguments for the StateSet event.
            </summary>
        </member>
        <member name="P:StateManagement.StateSetEventArgs.Tag">
            <summary>
            If the state object implements TaggedObject, then this will be its Tag. If it does not, then this will be null.
            </summary>
        </member>
        <member name="P:StateManagement.StateSetEventArgs.SettingAction">
            <summary>
            Indicates whether it was an Undo or a Redo action that raised the event
            </summary>
        </member>
        <member name="T:StateManagement.SubUndoService">
            <summary>
            This is used to track changes to a particular section of the application. It is used in conjunction with UndoServiceAggregate.
            </summary>
        </member>
        <member name="E:StateManagement.SubUndoService.CanUndoChanged">
            <summary>
            Raised when CanUndo changes.
            </summary>
        </member>
        <member name="E:StateManagement.SubUndoService.CanRedoChanged">
            <summary>
            Raised when CanRedo changes.
            </summary>
        </member>
        <member name="P:StateManagement.SubUndoService.Index">
            <summary>
            This is used by the AggregateUndoService to keep track of where changes were made.
            </summary>
        </member>
        <member name="T:StateManagement.UndoService`1">
            <summary>
            Generic Undo Service using delegates to access state
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:StateManagement.UndoService`1.#ctor(StateManagement.GetState{`0},StateManagement.SetState{`0},System.Nullable{System.Int32})">
            <summary>
            Create an UndoService.
            </summary>
            <param name="getState">Method to get the state of the tracked object. This must return a deep copy.</param>
            <param name="setState">Method to set the state of the tracked object. This must perform a deep copy.</param>
            <param name="cap">Capacity of Undo history</param>
        </member>
        <member name="E:StateManagement.UndoService`1.StateRecorded">
            <summary>
            Raised when RecordState() is executed.
            </summary>
        </member>
        <member name="E:StateManagement.UndoService`1.StateSet">
            <summary>
            Raised when an Undo or Redo is executed.
            </summary>
        </member>
        <member name="E:StateManagement.UndoService`1.CanUndoChanged">
            <summary>
            Raised when CanUndo changes.
            </summary>
        </member>
        <member name="E:StateManagement.UndoService`1.CanRedoChanged">
            <summary>
            Raised when CanRedo changes.
            </summary>
        </member>
        <member name="E:StateManagement.UndoService`1.ClearStackInvoked">
            <summary>
            Raised when one or both of the undo and redo stacks is cleared.
            </summary>
        </member>
        <member name="P:StateManagement.UndoService`1.CanUndo">
            <summary>
            
            </summary>
        </member>
        <member name="P:StateManagement.UndoService`1.IsStateChanged">
            <summary>
            Indicates whether the state was changed from its original state or the last time ClearIsStateChangedFlag was invoked.
            </summary>
        </member>
        <member name="P:StateManagement.UndoService`1.CanRedo">
            <summary>
            
            </summary>
        </member>
        <member name="M:StateManagement.UndoService`1.Reset">
            <summary>
            Clears the undo and redo stacks, clears IsStateChanged flag, considers the current state to be the original state.
            </summary>
        </member>
        <member name="M:StateManagement.UndoService`1.ClearStacks">
            <summary>
            Clears the Undo and Redo stacks.
            </summary>
        </member>
        <member name="M:StateManagement.UndoService`1.ClearUndoStack">
            <summary>
            Clear the Undo stack (but not the Redo stack).
            </summary>
        </member>
        <member name="M:StateManagement.UndoService`1.ClearRedoStack">
            <summary>
            Clear the Redo stack (but not the Undo stack).
            </summary>
        </member>
        <member name="M:StateManagement.UndoService`1.ClearIsStateChangedFlag">
            <summary>
            
            </summary>
        </member>
        <member name="M:StateManagement.UndoService`1.Undo">
            <summary>
            
            </summary>
        </member>
        <member name="M:StateManagement.UndoService`1.Redo">
            <summary>
            
            </summary>
        </member>
        <member name="M:StateManagement.UndoService`1.RecordState(System.Object)">
            <summary>
            Record the current state of the tracked object and add it to the Undo stack.
            </summary>
            <param name="tag">A tag associated with the recorded state</param>
        </member>
        <member name="T:StateManagement.UndoServiceAggregate">
            <summary>
            Provides a unified Undo/Redo interface for multiple Undo SubUndoServices.
            Change tracking is done by the individual child UndoServices. 
            </summary>
        </member>
        <member name="F:StateManagement.UndoServiceAggregate._clearStackInvocationsCount">
            <summary>
            Semaphgore counting the number of clear stack methods invoked.
            </summary>
        </member>
        <member name="F:StateManagement.UndoServiceAggregate._isInternallySettingState">
            <summary>
            Used by the StateSet event handler on subservices to determine if the action was invoked from here.
            </summary>
        </member>
        <member name="M:StateManagement.UndoServiceAggregate.#ctor(StateManagement.IUndoService[])">
            <summary>
            Creates an aggregate of UndoServices.
            </summary>
            <param name="subUndoServices"></param>
        </member>
        <member name="E:StateManagement.UndoServiceAggregate.StateSet">
            <summary>
            Raised when Undo or Redo is performed.
            </summary>
        </member>
        <member name="E:StateManagement.UndoServiceAggregate.CanUndoChanged">
            <summary>
            Raised when CanUndo changes.
            </summary>
        </member>
        <member name="E:StateManagement.UndoServiceAggregate.CanRedoChanged">
            <summary>
            Raised when CanRedo changes.
            </summary>
        </member>
        <member name="P:StateManagement.UndoServiceAggregate.IsStateChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:StateManagement.UndoServiceAggregate.CanUndo">
            <summary>
            </summary>
        </member>
        <member name="P:StateManagement.UndoServiceAggregate.CanRedo">
            <summary>
            </summary>
        </member>
        <member name="M:StateManagement.UndoServiceAggregate.AddUndoService(StateManagement.IUndoService)">
            <summary>
            Include a new SubUndoService in the aggregated Undo/Redo stack.
            </summary>
            <param name="subService"></param>
        </member>
        <member name="M:StateManagement.UndoServiceAggregate.Reset">
            <summary>
            Clears the Undo and Redo stacks for this object and all its subservices and resets the IsStateChanged flag.
            </summary>
        </member>
        <member name="M:StateManagement.UndoServiceAggregate.ClearStacks">
            <summary>
            Clears the Undo and Redo stacks for this object and all its subservices.
            </summary>
        </member>
        <member name="M:StateManagement.UndoServiceAggregate.Undo">
            <summary>
            
            </summary>
        </member>
        <member name="M:StateManagement.UndoServiceAggregate.Redo">
            <summary>
            
            </summary>
        </member>
        <member name="M:StateManagement.UndoServiceAggregate.ClearRedoStack">
            <summary>
            
            </summary>
        </member>
        <member name="M:StateManagement.UndoServiceAggregate.ClearUndoStack">
            <summary>
            </summary>
        </member>
        <member name="T:StateManagement.UndoServiceValidator`1">
            <summary>
            Validates Undo/Redo operations
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:StateManagement.UndoServiceValidator`1.ValidateUndo">
            <summary>
            Throws an exception if Undo() cannot be carried out.
            </summary>
        </member>
        <member name="M:StateManagement.UndoServiceValidator`1.ValidateRedo">
            <summary>
            Throws an exception if Redo() cannot be carried out.
            </summary>
        </member>
    </members>
</doc>
